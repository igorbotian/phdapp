//-------------------------------------------------------------------------------------------------
// Настройки, общие как для проекта в целом, так и для каждого его моделя по отдельности
//-------------------------------------------------------------------------------------------------

allprojects {
    apply plugin: 'java'
    group = phdAppGroup
    sourceCompatibility = phdAppSourceCompatibility
    version = phdAppVersion

    jar.archiveName = "${phdAppName}-${project.name}-${project.version}.jar"

    repositories {
        mavenCentral()
    }
}

//-------------------------------------------------------------------------------------------------
// Настройки модулей приложения
//-------------------------------------------------------------------------------------------------

project(':common') {
    description 'Domain area objects module'

    dependencies {
        compile(
                project(':ioc'),
                googleGuice,
                log4j
        )

        testCompile junit
    }
}

project(':conf') {
    description 'Configuration interface module'

    dependencies {
        compile log4j
    }
}

project(':conf-app') {
    description 'PhD application configuration implementation module'

    dependencies {
        compile(
                project(':conf'),
                project(':ioc'),
                project(':utils'),
                googleGuice,
                log4j
        )
    }
}

project(':input') {
    description 'Input data management interface module'

    dependencies {
        compile(
                project(':common'),
                project(':conf-app'),
                project(':ioc'),
                project(':utils'),
                googleGuice
        )

        testCompile(
                junit,
                easyMock
        )
    }
}

project(':input-json') {
    description 'JSON-based input data management implementation module'

    dependencies {
        compile(
                project(':conf-app'),
                project(':input'),
                project(':ioc'),
                gson,
                googleGuice,
                log4j
        )

        testCompile(
                junit,
                easyMock
        )
    }
}

project(':ioc') {
    description "Module providing some auxiliary features to implementation modules"

    dependencies {
        compile(
                googleGuice,
                googleGuiceMultibindings
        )
    }
}

project('locale') {
    description "Localization interface module"
}

project(':locale-java-i18n') {
    description "Java I18N-based localization implementation module"

    dependencies {
        compile(
                project(':ioc'),
                project(':locale'),
                googleGuice,
                log4j
        )

        testCompile junit
    }
}

project(':log-log4j') {
    description 'Log4j logging-related facilities module'

    dependencies {
        compile log4j
    }
}

project(':main') {
    description 'Main module. Application entry point'

    dependencies {
        compile(
                project(':conf-app'),
                project(':input-json'),
                project(':locale-java-i18n'),
                project(':log-log4j'),
                project(':output-csv'),
                project(':output-summary'),
                project(':quadprog'),
                project(':svm-interval'),
                project(':svm-validation'),
                project(':svm-validation-param'),
                project(':svm-validation-interval'),
                project(':svm-validation-report'),
                project(':svm-validation-sample'),
                project(':svm-validation-sample-interval'),
                project(':ui-swing'),
                project(':utils')
        )
    }
}

project(':output-csv') {
    description 'CSV-based output data management module'

    dependencies {
        compile(
                project(':locale'),
                project(':svm-validation-report')
        )

        testCompile junit
    }
}

project(':output-summary') {
    description 'Summary-based output data management module'

    dependencies {
        compile(
                project(':locale'),
                project(':svm-validation-report')
        )

        testCompile junit
    }
}

project(':quadprog') {
    description "Quadratic programming problem solving mechanism"

    dependencies {
        compile(
                log4j,
                files('lib/RCaller-2.5.jar'),
                project(':conf-app'),
                project(':ioc')
        )

        testCompile(
                googleGuice,
                junit
        )
    }
}

project(':svm') {
    description 'SVM abstract classification mechanism'

    dependencies {
        compile(
                project(':common'),
                project(':ioc')
        )
    }
}

project(':svm-checker') {
    description 'All-in-one comparison mechanism of different ranking pairwise classifiers'

    dependencies {
        testCompile(
                junit,
                googleGuice,
                project(':log-log4j'),
                project(':output-csv'),
                project(':locale-java-i18n'),
                project(':svm-interval-hausdorff'),
                project(':svm-validation-interval'),
                project(':svm-validation-sample-interval'),
                project(':svm-validation-sample-precise')
        )
    }
}

project(':svm-interval') {
    description 'SVM classification mechanism that supports interval data'

    dependencies {
        compile(
                commonsLang,
                project(':conf-app'),
                project(':common'),
                project(':ioc'),
                project(':quadprog'),
                project(':svm'),
                project(':utils')
        )

        testCompile(
                junit,
                project(':svm-precise')
        )
    }
}

project(':svm-interval-hausdorff') {
    description 'SVM classification mechanism that supports interval data and uses the Hausdorff distance'

    dependencies {
        compile(
                project(':common'),
                project(':ioc'),
                project(':svm'),
                project(':svm-interval'),
                project(':utils')
        )

        testCompile(
                junit,
                project(':svm-interval').sourceSets.test.output
        )
    }
}

project(':svm-precise') {
    description 'SVM classification mechanism that supports precise data only'

    dependencies {
        compile(
                project(':conf-app'),
                project(':common'),
                project(':ioc'),
                project(':quadprog'),
                project(':svm'),
                project(':svm-interval'),
                project(':utils')
        )
    }
}

project(':svm-ranksvm') {
    description 'RankSVM classification mechanism that supports interval data'

    dependencies {
        compile(
                project(':conf-app'),
                project(':common'),
                project(':ioc'),
                project(':svm'),
                project(':utils')
        )

        testCompile junit
    }
}

project(':svm-validation') {
    description 'Cross-validation common entities'

    dependencies {
        compile(
                project(':svm'),
                project(':svm-validation-param'),
                project(':svm-validation-report')
        )
    }
}

project(':svm-validation-interval') {
    description 'Cross-validation facility for the new SVM classification mechanism'

    dependencies {
        compile(
                project(':common'),
                project(':svm'),
                project(':svm-interval'),
                project(':svm-validation'),
                project(':svm-validation-param'),
                project(':svm-validation-report'),
                project(':svm-validation-sample')
        )
    }
}

project(':svm-validation-param') {
    description 'Parametrization functionality of the SVM classification mechanism'

    dependencies {
        compile(
                project(':ioc'),
                project(':svm'),
                project(':svm-interval')
        )
    }
}

project(':svm-validation-report') {
    description 'Report management for the cross-validation mechanism'

    dependencies {
        compile(
                project(':ioc'),
                project(':svm'),
                project(':svm-validation-param')
        )
    }
}

project(':svm-validation-sample') {
    description 'Cross-validation sample manager for generic SVM classification mechanism'

    dependencies {
        compile(
                project(':common'),
                project(':conf-app'),
                project(':svm'),
                project(':svm-interval'),
                project(':svm-validation-param'),
                project(':utils')
        )

        testCompile(
                junit,
                project(':common').sourceSets.test.output
        )
    }
}

project(':svm-validation-sample-interval') {
    description 'Cross-validation sample manager for the new SVM classification mechanism'

    dependencies {
        compile(
                project(':svm-validation-sample')
        )

        testCompile(
                junit,
                project(':svm-validation-sample').sourceSets.test.output
        )
    }
}

project(':svm-validation-sample-precise') {
    description 'Cross-validation sample manager for SVM classification mechanism which supports precise judgements only'

    dependencies {
        compile(
                project(':svm-validation-sample'),
                project(':svm-validation-sample-interval')
        )

        testCompile(
                junit,
                project(':svm-validation-sample').sourceSets.test.output
        )
    }
}

project(':ui') {
    description 'Abstract user interface entities'
}

project(':ui-common') {
    description 'User interface entities common for all implementations'

    dependencies {
        compile(
                project(':common'),
                project(':conf-app'),
                project(':ioc'),
                project(':locale'),
                project(':output-csv'),
                project(':output-summary'),
                project(':svm'),
                project(':svm-interval'),
                project(':svm-validation'),
                project(':svm-validation-interval'),
                project(':svm-validation-report'),
                project(':svm-validation-sample'),
                project(':ui')
        )
    }
}

project(':ui-swing') {
    description 'Swing-based user interface implementation'

    dependencies {
        compile(
                project(':ioc'),
                project(':locale'),
                project(':ui'),
                project(':ui-common')
        )
    }
}

project(':utils') {
    description 'An utilitarian module'

    dependencies {
        compile(
                project(':ioc'),
                commonsMath,
                log4j
        )

        testCompile(
                junit
        )
    }
}

dependencies {
    compile project(':main')
}

//-------------------------------------------------------------------------------------------------
// Конфигурация дистрибутива приложения
//-------------------------------------------------------------------------------------------------

apply plugin: 'application'

mainClassName = phdAppMainClassName
applicationDefaultJvmArgs = [
        "-Dphdapp.conf.folder=../conf",
        "-ea",
        "-Duser.country=US",
        "-Duser.language=en"
]

startScripts {
    classpath += files('src/dist/lib/conf')
}

distZip {
    baseName = phdAppName
}

//-------------------------------------------------------------------------------------------------
// Конфигурация средства статического анализа кода SonarQube
//-------------------------------------------------------------------------------------------------

apply plugin: "sonar-runner"

sonarRunner {
    toolVersion = '2.4'

    sonarProperties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.jdbc.url", "jdbc:h2:tcp://localhost:9092/sonar"
        property "sonar.jdbc.driverClassName", "com.h2.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"
    }
}
