//-------------------------------------------------------------------------------------------------
// Настройки, общие как для проекта в целом, так и для каждого его моделя по отдельности
//-------------------------------------------------------------------------------------------------

allprojects {
    apply plugin: 'java'
    group = phdAppGroup
    sourceCompatibility = phdAppSourceCompatibility
    version = phdAppVersion

    jar.archiveName = "${phdAppName}-${project.name}-${project.version}.jar"

    repositories {
        mavenCentral()

        maven {
            url 'https://swt-repo.googlecode.com/svn/repo'
        }
    }
}

//-------------------------------------------------------------------------------------------------
// Настройки модулей приложения
//-------------------------------------------------------------------------------------------------

project(':common') {
    description 'Domain area objects module'

    dependencies {
        compile(
                project(':ioc'),
                googleGuice,
                log4j
        )

        testCompile junit
    }
}

project(':conf') {
    description 'Configuration interface module'

    dependencies {
        compile log4j
    }
}

project(':conf-app') {
    description 'PhD application configuration implementation module'

    dependencies {
        compile(
                project(':conf'),
                project(':ioc'),
                project(':utils'),
                googleGuice,
                log4j
        )
    }
}

project(':input') {
    description 'Input data management interface module'

    dependencies {
        compile(
                project(':common'),
                project(':conf-app'),
                project(':ioc'),
                project(':utils'),
                googleGuice
        )

        testCompile(
                junit,
                easyMock
        )
    }
}

project(':input-json') {
    description 'JSON-based input data management implementation module'

    dependencies {
        compile(
                project(':conf-app'),
                project(':input'),
                project(':ioc'),
                gson,
                googleGuice,
                log4j
        )

        testCompile(
                junit,
                easyMock
        )
    }
}

project(':ioc') {
    description "Module providing some auxiliary features to implementation modules"

    dependencies {
        compile(
                googleGuice,
                googleGuiceMultibindings
        )
    }
}

project('locale') {
    description "Localization interface module"
}

project(':locale-java-i18n') {
    description "Java I18N-based localization implementation module"

    dependencies {
        compile(
                project(':ioc'),
                project(':locale'),
                googleGuice,
                log4j
        )

        testCompile junit
    }
}

project(':log-log4j') {
    description 'Log4j logging-related facilities module'

    dependencies {
        compile log4j
    }
}

project(':main') {
    description 'Main module. Application entry point'

    dependencies {
        compile(
                project(':conf-app'),
                project(':input-json'),
                project(':locale-java-i18n'),
                project(':log-log4j'),
                project(':output-csv'),
                project(':output-summary'),
                project(':svm-analytics'),
                project(':svm-interval'),
                project(':svm-validation-sample'),
                project(':ui-swing'),
                project(':utils')
        )
    }
}

project(':output-csv') {
    description 'CSV-based output data management module'

    dependencies {
        compile(
                project(':locale'),
                project(':svm-analytics'),
                project(':svm-validation-sample')
        )

        testCompile junit
    }
}

project(':output-summary') {
    description 'Summary-based output data management module'

    dependencies {
        compile(
                project(':locale'),
                project(':svm-analytics'),
                project(':svm-validation-sample')
        )

        testCompile junit
    }
}

project(':svm') {
    description 'SVM abstract classification mechanism'

    dependencies {
        compile(
                project(':common'),
                project(':ioc')
        )
    }
}

project(':svm-analytics') {
    description 'Analytics of the new SVM classification mechanism'

    dependencies {
        compile(
                project(':common'),
                project(':svm'),
                project(':svm-interval')
        )

        testCompile(
                junit,
                project(':common').sourceSets.test.output
        )
    }
}

project(':svm-interval') {
    description 'SVM classification mechanism that supports interval data'

    dependencies {
        compile(
                project(':common'),
                project(':ioc'),
                project(':svm')
        )
    }
}

project(':svm-validation-sample') {
    description 'Cross-validation sample manager for the new SVM classification mechanism'

    dependencies {
        compile(
                project(':common'),
                project(':svm')
        )

        testCompile(
                junit,
                project(':common').sourceSets.test.output
        )
    }
}

project(':ui') {
    description 'Abstract user interface entities'
}

project(':ui-common') {
    description 'User interface entities common for all implementations'

    dependencies {
        compile(
                project(':common'),
                project(':conf-app'),
                project(':ioc'),
                project(':locale'),
                project(':output-csv'),
                project(':output-summary'),
                project(':svm-analytics'),
                project(':svm-interval'),
                project(':svm-validation-sample'),
                project(':ui')
        )
    }
}

project(':ui-swing') {
    description 'Swing-based user interface implementation'

    dependencies {
        compile(
                project(':ioc'),
                project(':locale'),
                project(':ui'),
                project(':ui-common'),
                project(':svm-analytics'),
                project(':svm-interval'),
                project(':svm-validation-sample')
        )
    }
}

project(':utils') {
    description 'An utilitarian module'

    dependencies {
        compile(
                project(':ioc'),
                log4j
        )
    }
}

dependencies {
    compile project(':main')
}

//-------------------------------------------------------------------------------------------------
// Конфигурация дистрибутива приложения
//-------------------------------------------------------------------------------------------------

apply plugin: 'application'

mainClassName = phdAppMainClassName
applicationDefaultJvmArgs = ["-Dphdapp.conf.folder=../conf", "-Xdock:name=Classifier"]

startScripts {
    classpath += files('src/dist/lib/conf')
}

distZip {
    baseName = phdAppName
}